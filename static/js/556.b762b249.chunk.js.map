{"version":3,"file":"static/js/556.b762b249.chunk.js","mappings":"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","sources":["screens/Cram/index.js","utils/shuffle.js"],"sourcesContent":["import React, { useEffect, useMemo, useState, useCallback } from \"react\";\r\nimport { useStore } from \"../../context/StoreProvider\";\r\nimport { selectByDeck } from \"../../utils/scheduler\";\r\nimport { shuffle } from \"../../utils/shuffle\";\r\n\r\nexport default function Cram() {\r\n  const { BANK, deck, settings } = useStore();\r\n\r\n  // ----- Data pools -----\r\n  const pool = useMemo(() => selectByDeck(BANK, deck), [BANK, deck]);\r\n\r\n  const [starred, setStarred] = useState(() => new Set());\r\n  const [starsOnly, setStarsOnly] = useState(false);\r\n\r\n  const workingPool = useMemo(() => {\r\n    if (!starsOnly) return pool;\r\n    const ids = new Set(Array.from(starred));\r\n    return pool.filter((c) => ids.has(c.id));\r\n  }, [pool, starsOnly, starred]);\r\n\r\n  const [seed, setSeed] = useState(0);\r\n  const sessionSet = useMemo(\r\n    () => shuffle(workingPool).slice(0, settings.cramLength || 25),\r\n    [workingPool, settings.cramLength, seed]\r\n  );\r\n\r\n  // ----- Per-run state -----\r\n  const [i, setI] = useState(0);\r\n  const [show, setShow] = useState(false);\r\n  const [seen, setSeen] = useState(0);\r\n  const [revealed, setRevealed] = useState(0);\r\n\r\n  const empty = sessionSet.length === 0;\r\n  const card = !empty ? sessionSet[i] : undefined;\r\n\r\n  const progress = !empty ? (i + (show ? 1 : 0)) / sessionSet.length : 0;\r\n  const isStar = card ? starred.has(card.id) : false;\r\n\r\n  // ----- Helpers -----\r\n  const toggleReveal = useCallback(() => {\r\n    setShow((s) => {\r\n      if (!s) setRevealed((r) => r + 1);\r\n      return !s;\r\n    });\r\n  }, []);\r\n\r\n  const go = useCallback(\r\n    (dir) => {\r\n      if (empty) return;\r\n      setShow(false);\r\n      setI((x) => {\r\n        const n = (x + dir + sessionSet.length) % sessionSet.length;\r\n        if (dir > 0) setSeen((c) => Math.min(c + 1, sessionSet.length));\r\n        return n;\r\n      });\r\n    },\r\n    [empty, sessionSet.length]\r\n  );\r\n\r\n  const next = useCallback(() => go(1), [go]);\r\n  const prev = useCallback(() => go(-1), [go]);\r\n\r\n  const toggleStar = useCallback(() => {\r\n    if (!card) return;\r\n    setStarred((old) => {\r\n      const s = new Set(old);\r\n      if (s.has(card.id)) s.delete(card.id);\r\n      else s.add(card.id);\r\n      return s;\r\n    });\r\n  }, [card]);\r\n\r\n  const reshuffle = useCallback(() => {\r\n    setSeed((s) => s + 1);\r\n    setI(0);\r\n    setShow(false);\r\n    setSeen(0);\r\n    setRevealed(0);\r\n  }, []);\r\n\r\n  // Keyboard shortcuts\r\n  useEffect(() => {\r\n    const onKey = (e) => {\r\n      const tag = (e.target && e.target.tagName) || \"\";\r\n      if (tag === \"INPUT\" || tag === \"TEXTAREA\") return;\r\n\r\n      if (e.code === \"Space\") {\r\n        e.preventDefault();\r\n        toggleReveal();\r\n      } else if (e.key === \"ArrowRight\" || e.key === \"Enter\") {\r\n        next();\r\n      } else if (e.key === \"ArrowLeft\") {\r\n        prev();\r\n      } else if (e.key?.toLowerCase() === \"s\") {\r\n        toggleStar();\r\n      }\r\n    };\r\n    window.addEventListener(\"keydown\", onKey);\r\n    return () => window.removeEventListener(\"keydown\", onKey);\r\n  }, [next, prev, toggleReveal, toggleStar]);\r\n\r\n  // Optional auto-advance\r\n  const [autoAdvance, setAutoAdvance] = useState(true);\r\n  const [autoDelayMs, setAutoDelayMs] = useState(900);\r\n  useEffect(() => {\r\n    if (!autoAdvance || !show || empty) return;\r\n    const t = setTimeout(() => next(), autoDelayMs);\r\n    return () => clearTimeout(t);\r\n  }, [show, autoAdvance, autoDelayMs, next, empty]);\r\n\r\n  // ----- Render -----\r\n  return (\r\n    <div className=\"p-6 rounded-2xl border border-white/10 bg-zinc-900/60\">\r\n      {/* Header */}\r\n      <div className=\"flex items-center justify-between mb-3\">\r\n        <div className=\"text-xs uppercase tracking-wider text-emerald-400/90\">\r\n          Cram • {deck}\r\n        </div>\r\n        <div className=\"text-xs text-zinc-400 space-x-3\">\r\n          <span>Cards: {sessionSet.length}</span>\r\n          <span>Seen: {seen}</span>\r\n          <span>Revealed: {revealed}</span>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Progress */}\r\n      <div className=\"h-1.5 w-full bg-white/10 rounded-full overflow-hidden mb-4\">\r\n        <div\r\n          className=\"h-full bg-emerald-500 transition-all\"\r\n          style={{ width: `${Math.min(progress, 1) * 100 || 0}%` }}\r\n        />\r\n      </div>\r\n\r\n      {/* Empty state */}\r\n      {empty ? (\r\n        <div className=\"rounded-2xl border border-white/10 bg-white/[0.03] p-6\">\r\n          <div className=\"text-sm mb-3\">\r\n            {starsOnly ? \"No starred cards yet in this deck.\" : \"No cards in this deck yet.\"}\r\n          </div>\r\n          {starsOnly && (\r\n            <button\r\n              onClick={() => setStarsOnly(false)}\r\n              className=\"px-3 py-2 rounded bg-emerald-600/80 hover:bg-emerald-600\"\r\n            >\r\n              Show all\r\n            </button>\r\n          )}\r\n        </div>\r\n      ) : (\r\n        <>\r\n          {/* Card */}\r\n          <div className=\"rounded-2xl border border-white/10 bg-white/[0.03] p-4\">\r\n            <div className=\"flex items-center justify-between mb-2\">\r\n              <div className=\"text-[11px] uppercase tracking-wider text-zinc-400\">\r\n                {i + 1}/{sessionSet.length}\r\n              </div>\r\n              <button\r\n                onClick={toggleStar}\r\n                className={\r\n                  \"px-2 py-1 text-xs rounded border \" +\r\n                  (isStar\r\n                    ? \"bg-yellow-500/20 border-yellow-400/40 text-yellow-200\"\r\n                    : \"bg-zinc-800 border-white/10 text-zinc-300 hover:bg-zinc-700\")\r\n                }\r\n              >\r\n                {isStar ? \"★ Starred\" : \"☆ Star\"}\r\n              </button>\r\n            </div>\r\n\r\n            <div className=\"text-lg font-medium mb-3\">{card.prompt}</div>\r\n\r\n            {/* Controls */}\r\n            <div className=\"flex items-center gap-2 mb-2\">\r\n              <button\r\n                className={\r\n                  \"text-xs px-2 py-1 rounded border \" +\r\n                  (show\r\n                    ? \"bg-zinc-700 border-white/10\"\r\n                    : \"bg-zinc-800 border-white/10 hover:bg-zinc-700\")\r\n                }\r\n                onClick={toggleReveal}\r\n              >\r\n                {show ? \"Hide\" : \"Reveal\"} (Space)\r\n              </button>\r\n\r\n              <label className=\"text-xs text-zinc-300 flex items-center gap-1\">\r\n                <input\r\n                  type=\"checkbox\"\r\n                  className=\"accent-emerald-500\"\r\n                  checked={autoAdvance}\r\n                  onChange={(e) => setAutoAdvance(e.target.checked)}\r\n                />\r\n                Auto-advance\r\n              </label>\r\n\r\n              <label className=\"text-xs text-zinc-300 flex items-center gap-1\">\r\n                <span>Delay</span>\r\n                <select\r\n                  className=\"bg-zinc-800 border border-white/10 rounded px-2 py-1 text-xs\"\r\n                  value={autoDelayMs}\r\n                  onChange={(e) => setAutoDelayMs(Number(e.target.value))}\r\n                >\r\n                  {[700, 900, 1200, 1500, 2000].map((ms) => (\r\n                    <option key={ms} value={ms}>\r\n                      {ms} ms\r\n                    </option>\r\n                  ))}\r\n                </select>\r\n              </label>\r\n\r\n              <label className=\"ml-auto text-xs text-zinc-300 flex items-center gap-1\">\r\n                <input\r\n                  type=\"checkbox\"\r\n                  className=\"accent-emerald-500\"\r\n                  checked={starsOnly}\r\n                  onChange={(e) => {\r\n                    setStarsOnly(e.target.checked);\r\n                    setI(0);\r\n                    setShow(false);\r\n                    setSeen(0);\r\n                    setRevealed(0);\r\n                  }}\r\n                />\r\n                Starred only\r\n              </label>\r\n            </div>\r\n\r\n            {/* Answer */}\r\n            {show && (\r\n              <div className=\"mt-3 text-sm space-y-2\">\r\n                {card.type === \"tf\" && (\r\n                  <div className=\"px-3 py-2 rounded border bg-zinc-800 border-white/10\">\r\n                    Answer:{\" \"}\r\n                    <b className=\"text-emerald-300\">\r\n                      {card.answerBool ? \"True\" : \"False\"}\r\n                    </b>\r\n                  </div>\r\n                )}\r\n\r\n                {card.type === \"mc\" && (\r\n                  <div className=\"px-3 py-2 rounded border bg-zinc-800 border-white/10\">\r\n                    Correct:{\" \"}\r\n                    <b className=\"text-emerald-300\">\r\n                      {card.options?.[card.answerIndex]}\r\n                    </b>\r\n                  </div>\r\n                )}\r\n\r\n                {card.type === \"recall\" && (\r\n                  <div className=\"px-3 py-2 rounded border bg-zinc-800 border-white/10\">\r\n                    Expected: <b className=\"text-emerald-300\">{card.expected}</b>\r\n                  </div>\r\n                )}\r\n\r\n                {card.explain && (\r\n                  <div className=\"text-zinc-300/90\">{card.explain}</div>\r\n                )}\r\n              </div>\r\n            )}\r\n          </div>\r\n\r\n          {/* Nav */}\r\n          <div className=\"mt-5 flex items-center justify-between\">\r\n            <button\r\n              onClick={prev}\r\n              className=\"px-3 py-2 rounded bg-zinc-800 border border-white/10 hover:bg-zinc-700\"\r\n            >\r\n              ← Prev\r\n            </button>\r\n\r\n            <div className=\"flex items-center gap-2\">\r\n              <button\r\n                onClick={reshuffle}\r\n                className=\"px-3 py-2 rounded bg-zinc-800 border border-white/10 hover:bg-zinc-700\"\r\n              >\r\n                Reshuffle\r\n              </button>\r\n              <button\r\n                onClick={next}\r\n                className=\"px-3 py-2 rounded bg-emerald-600/80 hover:bg-emerald-600\"\r\n              >\r\n                Next →\r\n              </button>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"mt-3 text-[11px] text-zinc-500\">\r\n            Shortcuts: <b>Space</b> reveal • <b>←/→</b> prev/next • <b>S</b> star\r\n          </div>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n","export function shuffle(arr) {\r\n  const a = [...arr];\r\n  for (let i = a.length - 1; i > 0; i--) {\r\n    const j = Math.floor(Math.random() * (i + 1));\r\n    [a[i], a[j]] = [a[j], a[i]];\r\n  }\r\n  return a;\r\n}\r\n"],"names":["Cram","_card$options","BANK","deck","settings","useStore","pool","useMemo","selectByDeck","starred","setStarred","useState","Set","starsOnly","setStarsOnly","workingPool","ids","Array","from","filter","c","has","id","seed","setSeed","sessionSet","shuffle","slice","cramLength","i","setI","show","setShow","seen","setSeen","revealed","setRevealed","empty","length","card","undefined","progress","isStar","toggleReveal","useCallback","s","r","go","dir","x","n","Math","min","next","prev","toggleStar","old","delete","add","reshuffle","useEffect","onKey","e","_e$key","tag","target","tagName","code","preventDefault","key","toLowerCase","window","addEventListener","removeEventListener","autoAdvance","setAutoAdvance","autoDelayMs","setAutoDelayMs","t","setTimeout","clearTimeout","_jsxs","className","children","_jsx","style","width","concat","onClick","_Fragment","prompt","type","checked","onChange","value","Number","map","ms","answerBool","options","answerIndex","expected","explain","arr","a","j","floor","random"],"sourceRoot":""}